@page "/customers/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]
@using CarRentalManagement.Shared.Domain

<h3 class="card-title">Car Customers</h3>

@if(Customers== null) {
	<div class= "alert alert-info">Loading Customers...</div>
}
else {
	<table class = "table table-responsive">
		<thead>
			<tr>
				<th>Driving License</th>
				<th>Contact Number</th>
				<th>Email</th>
				<th>Actions</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var customer in Customers)
				{
					<tr>
						<td>@customer</td>
						<td>
							<a href="/Customers/view/@customer.Id" class="btn btn-primary">
								<span class="oi oi-book"></span>
							</a>
							<a href="/Customers/edit/@customer.Id" class="btn btn-warning">
								<span class="oi oi-pencil"></span>
							</a>
							<button class="btn btn-danger" @onclick ="@(()=>Delete(customer.Id))">
								<span class="oi oi-delete"></span>
							</button>
						</td>
					</tr>
				}
		</tbody>
	</table>
}

@code {
	private List<Customer> Customers;

	protected async override Task OnInitializedAsync()
	{
		Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");

	}

	async Task Delete(int customerId)
	{
		var customer = Customers.First(q => q.Id == customerId);
		var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {customer}?");
		if (confirm)
		{
			await _client.DeleteAsync($"{Endpoints.CustomersEndpoint}/{customerId}");
			await OnInitializedAsync();
		}
	}
}
